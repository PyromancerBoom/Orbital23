// Code generated by Kitex v0.5.2. DO NOT EDIT.

package service

import (
	"context"
	service "gatewaystarter/kitex_gen/service"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return serviceServiceInfo
}

var serviceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Service"
	handlerType := (*service.Service)(nil)
	methods := map[string]kitex.MethodInfo{
		"doSomething":     kitex.NewMethodInfo(doSomethingHandler, newServiceDoSomethingArgs, newServiceDoSomethingResult, false),
		"doSomethingMore": kitex.NewMethodInfo(doSomethingMoreHandler, newServiceDoSomethingMoreArgs, newServiceDoSomethingMoreResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "service",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func doSomethingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*service.ServiceDoSomethingArgs)
	realResult := result.(*service.ServiceDoSomethingResult)
	success, err := handler.(service.Service).DoSomething(ctx, realArg.Input)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newServiceDoSomethingArgs() interface{} {
	return service.NewServiceDoSomethingArgs()
}

func newServiceDoSomethingResult() interface{} {
	return service.NewServiceDoSomethingResult()
}

func doSomethingMoreHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*service.ServiceDoSomethingMoreArgs)
	realResult := result.(*service.ServiceDoSomethingMoreResult)
	success, err := handler.(service.Service).DoSomethingMore(ctx, realArg.Input)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newServiceDoSomethingMoreArgs() interface{} {
	return service.NewServiceDoSomethingMoreArgs()
}

func newServiceDoSomethingMoreResult() interface{} {
	return service.NewServiceDoSomethingMoreResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) DoSomething(ctx context.Context, input string) (r string, err error) {
	var _args service.ServiceDoSomethingArgs
	_args.Input = input
	var _result service.ServiceDoSomethingResult
	if err = p.c.Call(ctx, "doSomething", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DoSomethingMore(ctx context.Context, input string) (r string, err error) {
	var _args service.ServiceDoSomethingMoreArgs
	_args.Input = input
	var _result service.ServiceDoSomethingMoreResult
	if err = p.c.Call(ctx, "doSomethingMore", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
