// Code generated by thriftgo (0.2.11). DO NOT EDIT.

package calculator

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type CalculationRequest struct {
	A int32 `thrift:"a,1" frugal:"1,default,i32" json:"a"`
	B int32 `thrift:"b,2" frugal:"2,default,i32" json:"b"`
}

func NewCalculationRequest() *CalculationRequest {
	return &CalculationRequest{}
}

func (p *CalculationRequest) InitDefault() {
	*p = CalculationRequest{}
}

func (p *CalculationRequest) GetA() (v int32) {
	return p.A
}

func (p *CalculationRequest) GetB() (v int32) {
	return p.B
}
func (p *CalculationRequest) SetA(val int32) {
	p.A = val
}
func (p *CalculationRequest) SetB(val int32) {
	p.B = val
}

var fieldIDToName_CalculationRequest = map[int16]string{
	1: "a",
	2: "b",
}

func (p *CalculationRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CalculationRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CalculationRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.A = v
	}
	return nil
}

func (p *CalculationRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.B = v
	}
	return nil
}

func (p *CalculationRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CalculationRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CalculationRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("a", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.A); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CalculationRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("b", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.B); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CalculationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CalculationRequest(%+v)", *p)
}

func (p *CalculationRequest) DeepEqual(ano *CalculationRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.A) {
		return false
	}
	if !p.Field2DeepEqual(ano.B) {
		return false
	}
	return true
}

func (p *CalculationRequest) Field1DeepEqual(src int32) bool {

	if p.A != src {
		return false
	}
	return true
}
func (p *CalculationRequest) Field2DeepEqual(src int32) bool {

	if p.B != src {
		return false
	}
	return true
}

type CalculationResponse struct {
	Result_ int32 `thrift:"result,1" frugal:"1,default,i32" json:"result"`
}

func NewCalculationResponse() *CalculationResponse {
	return &CalculationResponse{}
}

func (p *CalculationResponse) InitDefault() {
	*p = CalculationResponse{}
}

func (p *CalculationResponse) GetResult_() (v int32) {
	return p.Result_
}
func (p *CalculationResponse) SetResult_(val int32) {
	p.Result_ = val
}

var fieldIDToName_CalculationResponse = map[int16]string{
	1: "result",
}

func (p *CalculationResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CalculationResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CalculationResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *CalculationResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CalculationResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CalculationResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("result", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Result_); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CalculationResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CalculationResponse(%+v)", *p)
}

func (p *CalculationResponse) DeepEqual(ano *CalculationResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Result_) {
		return false
	}
	return true
}

func (p *CalculationResponse) Field1DeepEqual(src int32) bool {

	if p.Result_ != src {
		return false
	}
	return true
}

type CalculatorService interface {
	AddNums(ctx context.Context, request *CalculationRequest) (r *CalculationResponse, err error)

	SubNums(ctx context.Context, request *CalculationRequest) (r *CalculationResponse, err error)

	DivNums(ctx context.Context, request *CalculationRequest) (r *CalculationResponse, err error)

	MultiplyNums(ctx context.Context, request *CalculationRequest) (r *CalculationResponse, err error)
}

type CalculatorServiceClient struct {
	c thrift.TClient
}

func NewCalculatorServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CalculatorServiceClient {
	return &CalculatorServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewCalculatorServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CalculatorServiceClient {
	return &CalculatorServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewCalculatorServiceClient(c thrift.TClient) *CalculatorServiceClient {
	return &CalculatorServiceClient{
		c: c,
	}
}

func (p *CalculatorServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *CalculatorServiceClient) AddNums(ctx context.Context, request *CalculationRequest) (r *CalculationResponse, err error) {
	var _args CalculatorServiceAddNumsArgs
	_args.Request = request
	var _result CalculatorServiceAddNumsResult
	if err = p.Client_().Call(ctx, "addNums", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CalculatorServiceClient) SubNums(ctx context.Context, request *CalculationRequest) (r *CalculationResponse, err error) {
	var _args CalculatorServiceSubNumsArgs
	_args.Request = request
	var _result CalculatorServiceSubNumsResult
	if err = p.Client_().Call(ctx, "subNums", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CalculatorServiceClient) DivNums(ctx context.Context, request *CalculationRequest) (r *CalculationResponse, err error) {
	var _args CalculatorServiceDivNumsArgs
	_args.Request = request
	var _result CalculatorServiceDivNumsResult
	if err = p.Client_().Call(ctx, "divNums", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CalculatorServiceClient) MultiplyNums(ctx context.Context, request *CalculationRequest) (r *CalculationResponse, err error) {
	var _args CalculatorServiceMultiplyNumsArgs
	_args.Request = request
	var _result CalculatorServiceMultiplyNumsResult
	if err = p.Client_().Call(ctx, "multiplyNums", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type CalculatorServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CalculatorService
}

func (p *CalculatorServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CalculatorServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CalculatorServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCalculatorServiceProcessor(handler CalculatorService) *CalculatorServiceProcessor {
	self := &CalculatorServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("addNums", &calculatorServiceProcessorAddNums{handler: handler})
	self.AddToProcessorMap("subNums", &calculatorServiceProcessorSubNums{handler: handler})
	self.AddToProcessorMap("divNums", &calculatorServiceProcessorDivNums{handler: handler})
	self.AddToProcessorMap("multiplyNums", &calculatorServiceProcessorMultiplyNums{handler: handler})
	return self
}
func (p *CalculatorServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type calculatorServiceProcessorAddNums struct {
	handler CalculatorService
}

func (p *calculatorServiceProcessorAddNums) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CalculatorServiceAddNumsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addNums", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CalculatorServiceAddNumsResult{}
	var retval *CalculationResponse
	if retval, err2 = p.handler.AddNums(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addNums: "+err2.Error())
		oprot.WriteMessageBegin("addNums", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("addNums", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type calculatorServiceProcessorSubNums struct {
	handler CalculatorService
}

func (p *calculatorServiceProcessorSubNums) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CalculatorServiceSubNumsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("subNums", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CalculatorServiceSubNumsResult{}
	var retval *CalculationResponse
	if retval, err2 = p.handler.SubNums(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing subNums: "+err2.Error())
		oprot.WriteMessageBegin("subNums", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("subNums", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type calculatorServiceProcessorDivNums struct {
	handler CalculatorService
}

func (p *calculatorServiceProcessorDivNums) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CalculatorServiceDivNumsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("divNums", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CalculatorServiceDivNumsResult{}
	var retval *CalculationResponse
	if retval, err2 = p.handler.DivNums(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing divNums: "+err2.Error())
		oprot.WriteMessageBegin("divNums", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("divNums", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type calculatorServiceProcessorMultiplyNums struct {
	handler CalculatorService
}

func (p *calculatorServiceProcessorMultiplyNums) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CalculatorServiceMultiplyNumsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("multiplyNums", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CalculatorServiceMultiplyNumsResult{}
	var retval *CalculationResponse
	if retval, err2 = p.handler.MultiplyNums(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiplyNums: "+err2.Error())
		oprot.WriteMessageBegin("multiplyNums", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("multiplyNums", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type CalculatorServiceAddNumsArgs struct {
	Request *CalculationRequest `thrift:"request,1" frugal:"1,default,CalculationRequest" json:"request"`
}

func NewCalculatorServiceAddNumsArgs() *CalculatorServiceAddNumsArgs {
	return &CalculatorServiceAddNumsArgs{}
}

func (p *CalculatorServiceAddNumsArgs) InitDefault() {
	*p = CalculatorServiceAddNumsArgs{}
}

var CalculatorServiceAddNumsArgs_Request_DEFAULT *CalculationRequest

func (p *CalculatorServiceAddNumsArgs) GetRequest() (v *CalculationRequest) {
	if !p.IsSetRequest() {
		return CalculatorServiceAddNumsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *CalculatorServiceAddNumsArgs) SetRequest(val *CalculationRequest) {
	p.Request = val
}

var fieldIDToName_CalculatorServiceAddNumsArgs = map[int16]string{
	1: "request",
}

func (p *CalculatorServiceAddNumsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CalculatorServiceAddNumsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CalculatorServiceAddNumsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CalculatorServiceAddNumsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewCalculationRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CalculatorServiceAddNumsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("addNums_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CalculatorServiceAddNumsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CalculatorServiceAddNumsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CalculatorServiceAddNumsArgs(%+v)", *p)
}

func (p *CalculatorServiceAddNumsArgs) DeepEqual(ano *CalculatorServiceAddNumsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *CalculatorServiceAddNumsArgs) Field1DeepEqual(src *CalculationRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type CalculatorServiceAddNumsResult struct {
	Success *CalculationResponse `thrift:"success,0,optional" frugal:"0,optional,CalculationResponse" json:"success,omitempty"`
}

func NewCalculatorServiceAddNumsResult() *CalculatorServiceAddNumsResult {
	return &CalculatorServiceAddNumsResult{}
}

func (p *CalculatorServiceAddNumsResult) InitDefault() {
	*p = CalculatorServiceAddNumsResult{}
}

var CalculatorServiceAddNumsResult_Success_DEFAULT *CalculationResponse

func (p *CalculatorServiceAddNumsResult) GetSuccess() (v *CalculationResponse) {
	if !p.IsSetSuccess() {
		return CalculatorServiceAddNumsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CalculatorServiceAddNumsResult) SetSuccess(x interface{}) {
	p.Success = x.(*CalculationResponse)
}

var fieldIDToName_CalculatorServiceAddNumsResult = map[int16]string{
	0: "success",
}

func (p *CalculatorServiceAddNumsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CalculatorServiceAddNumsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CalculatorServiceAddNumsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CalculatorServiceAddNumsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCalculationResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CalculatorServiceAddNumsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("addNums_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CalculatorServiceAddNumsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CalculatorServiceAddNumsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CalculatorServiceAddNumsResult(%+v)", *p)
}

func (p *CalculatorServiceAddNumsResult) DeepEqual(ano *CalculatorServiceAddNumsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CalculatorServiceAddNumsResult) Field0DeepEqual(src *CalculationResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CalculatorServiceSubNumsArgs struct {
	Request *CalculationRequest `thrift:"request,1" frugal:"1,default,CalculationRequest" json:"request"`
}

func NewCalculatorServiceSubNumsArgs() *CalculatorServiceSubNumsArgs {
	return &CalculatorServiceSubNumsArgs{}
}

func (p *CalculatorServiceSubNumsArgs) InitDefault() {
	*p = CalculatorServiceSubNumsArgs{}
}

var CalculatorServiceSubNumsArgs_Request_DEFAULT *CalculationRequest

func (p *CalculatorServiceSubNumsArgs) GetRequest() (v *CalculationRequest) {
	if !p.IsSetRequest() {
		return CalculatorServiceSubNumsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *CalculatorServiceSubNumsArgs) SetRequest(val *CalculationRequest) {
	p.Request = val
}

var fieldIDToName_CalculatorServiceSubNumsArgs = map[int16]string{
	1: "request",
}

func (p *CalculatorServiceSubNumsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CalculatorServiceSubNumsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CalculatorServiceSubNumsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CalculatorServiceSubNumsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewCalculationRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CalculatorServiceSubNumsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("subNums_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CalculatorServiceSubNumsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CalculatorServiceSubNumsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CalculatorServiceSubNumsArgs(%+v)", *p)
}

func (p *CalculatorServiceSubNumsArgs) DeepEqual(ano *CalculatorServiceSubNumsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *CalculatorServiceSubNumsArgs) Field1DeepEqual(src *CalculationRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type CalculatorServiceSubNumsResult struct {
	Success *CalculationResponse `thrift:"success,0,optional" frugal:"0,optional,CalculationResponse" json:"success,omitempty"`
}

func NewCalculatorServiceSubNumsResult() *CalculatorServiceSubNumsResult {
	return &CalculatorServiceSubNumsResult{}
}

func (p *CalculatorServiceSubNumsResult) InitDefault() {
	*p = CalculatorServiceSubNumsResult{}
}

var CalculatorServiceSubNumsResult_Success_DEFAULT *CalculationResponse

func (p *CalculatorServiceSubNumsResult) GetSuccess() (v *CalculationResponse) {
	if !p.IsSetSuccess() {
		return CalculatorServiceSubNumsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CalculatorServiceSubNumsResult) SetSuccess(x interface{}) {
	p.Success = x.(*CalculationResponse)
}

var fieldIDToName_CalculatorServiceSubNumsResult = map[int16]string{
	0: "success",
}

func (p *CalculatorServiceSubNumsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CalculatorServiceSubNumsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CalculatorServiceSubNumsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CalculatorServiceSubNumsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCalculationResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CalculatorServiceSubNumsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("subNums_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CalculatorServiceSubNumsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CalculatorServiceSubNumsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CalculatorServiceSubNumsResult(%+v)", *p)
}

func (p *CalculatorServiceSubNumsResult) DeepEqual(ano *CalculatorServiceSubNumsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CalculatorServiceSubNumsResult) Field0DeepEqual(src *CalculationResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CalculatorServiceDivNumsArgs struct {
	Request *CalculationRequest `thrift:"request,1" frugal:"1,default,CalculationRequest" json:"request"`
}

func NewCalculatorServiceDivNumsArgs() *CalculatorServiceDivNumsArgs {
	return &CalculatorServiceDivNumsArgs{}
}

func (p *CalculatorServiceDivNumsArgs) InitDefault() {
	*p = CalculatorServiceDivNumsArgs{}
}

var CalculatorServiceDivNumsArgs_Request_DEFAULT *CalculationRequest

func (p *CalculatorServiceDivNumsArgs) GetRequest() (v *CalculationRequest) {
	if !p.IsSetRequest() {
		return CalculatorServiceDivNumsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *CalculatorServiceDivNumsArgs) SetRequest(val *CalculationRequest) {
	p.Request = val
}

var fieldIDToName_CalculatorServiceDivNumsArgs = map[int16]string{
	1: "request",
}

func (p *CalculatorServiceDivNumsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CalculatorServiceDivNumsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CalculatorServiceDivNumsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CalculatorServiceDivNumsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewCalculationRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CalculatorServiceDivNumsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("divNums_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CalculatorServiceDivNumsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CalculatorServiceDivNumsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CalculatorServiceDivNumsArgs(%+v)", *p)
}

func (p *CalculatorServiceDivNumsArgs) DeepEqual(ano *CalculatorServiceDivNumsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *CalculatorServiceDivNumsArgs) Field1DeepEqual(src *CalculationRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type CalculatorServiceDivNumsResult struct {
	Success *CalculationResponse `thrift:"success,0,optional" frugal:"0,optional,CalculationResponse" json:"success,omitempty"`
}

func NewCalculatorServiceDivNumsResult() *CalculatorServiceDivNumsResult {
	return &CalculatorServiceDivNumsResult{}
}

func (p *CalculatorServiceDivNumsResult) InitDefault() {
	*p = CalculatorServiceDivNumsResult{}
}

var CalculatorServiceDivNumsResult_Success_DEFAULT *CalculationResponse

func (p *CalculatorServiceDivNumsResult) GetSuccess() (v *CalculationResponse) {
	if !p.IsSetSuccess() {
		return CalculatorServiceDivNumsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CalculatorServiceDivNumsResult) SetSuccess(x interface{}) {
	p.Success = x.(*CalculationResponse)
}

var fieldIDToName_CalculatorServiceDivNumsResult = map[int16]string{
	0: "success",
}

func (p *CalculatorServiceDivNumsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CalculatorServiceDivNumsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CalculatorServiceDivNumsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CalculatorServiceDivNumsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCalculationResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CalculatorServiceDivNumsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("divNums_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CalculatorServiceDivNumsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CalculatorServiceDivNumsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CalculatorServiceDivNumsResult(%+v)", *p)
}

func (p *CalculatorServiceDivNumsResult) DeepEqual(ano *CalculatorServiceDivNumsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CalculatorServiceDivNumsResult) Field0DeepEqual(src *CalculationResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CalculatorServiceMultiplyNumsArgs struct {
	Request *CalculationRequest `thrift:"request,1" frugal:"1,default,CalculationRequest" json:"request"`
}

func NewCalculatorServiceMultiplyNumsArgs() *CalculatorServiceMultiplyNumsArgs {
	return &CalculatorServiceMultiplyNumsArgs{}
}

func (p *CalculatorServiceMultiplyNumsArgs) InitDefault() {
	*p = CalculatorServiceMultiplyNumsArgs{}
}

var CalculatorServiceMultiplyNumsArgs_Request_DEFAULT *CalculationRequest

func (p *CalculatorServiceMultiplyNumsArgs) GetRequest() (v *CalculationRequest) {
	if !p.IsSetRequest() {
		return CalculatorServiceMultiplyNumsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *CalculatorServiceMultiplyNumsArgs) SetRequest(val *CalculationRequest) {
	p.Request = val
}

var fieldIDToName_CalculatorServiceMultiplyNumsArgs = map[int16]string{
	1: "request",
}

func (p *CalculatorServiceMultiplyNumsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *CalculatorServiceMultiplyNumsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CalculatorServiceMultiplyNumsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CalculatorServiceMultiplyNumsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewCalculationRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CalculatorServiceMultiplyNumsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("multiplyNums_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CalculatorServiceMultiplyNumsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CalculatorServiceMultiplyNumsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CalculatorServiceMultiplyNumsArgs(%+v)", *p)
}

func (p *CalculatorServiceMultiplyNumsArgs) DeepEqual(ano *CalculatorServiceMultiplyNumsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *CalculatorServiceMultiplyNumsArgs) Field1DeepEqual(src *CalculationRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type CalculatorServiceMultiplyNumsResult struct {
	Success *CalculationResponse `thrift:"success,0,optional" frugal:"0,optional,CalculationResponse" json:"success,omitempty"`
}

func NewCalculatorServiceMultiplyNumsResult() *CalculatorServiceMultiplyNumsResult {
	return &CalculatorServiceMultiplyNumsResult{}
}

func (p *CalculatorServiceMultiplyNumsResult) InitDefault() {
	*p = CalculatorServiceMultiplyNumsResult{}
}

var CalculatorServiceMultiplyNumsResult_Success_DEFAULT *CalculationResponse

func (p *CalculatorServiceMultiplyNumsResult) GetSuccess() (v *CalculationResponse) {
	if !p.IsSetSuccess() {
		return CalculatorServiceMultiplyNumsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CalculatorServiceMultiplyNumsResult) SetSuccess(x interface{}) {
	p.Success = x.(*CalculationResponse)
}

var fieldIDToName_CalculatorServiceMultiplyNumsResult = map[int16]string{
	0: "success",
}

func (p *CalculatorServiceMultiplyNumsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CalculatorServiceMultiplyNumsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CalculatorServiceMultiplyNumsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CalculatorServiceMultiplyNumsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCalculationResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CalculatorServiceMultiplyNumsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("multiplyNums_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CalculatorServiceMultiplyNumsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CalculatorServiceMultiplyNumsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CalculatorServiceMultiplyNumsResult(%+v)", *p)
}

func (p *CalculatorServiceMultiplyNumsResult) DeepEqual(ano *CalculatorServiceMultiplyNumsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CalculatorServiceMultiplyNumsResult) Field0DeepEqual(src *CalculationResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
