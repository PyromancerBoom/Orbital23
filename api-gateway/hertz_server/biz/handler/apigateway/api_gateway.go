// Code generated by hertz generator.

package apigateway

import (
	"context"

	apigateway "api-gateway/hertz_server/biz/model/apigateway"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"fmt"

	idlmap "api-gateway/hertz_server/biz/model/idlmap"
)

// ProcessGetRequest .
// @router /{:serviceName}/{:serviceMethod} [GET]
func ProcessGetRequest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req apigateway.GatewayRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	fmt.Println("Reached Here")

	print(c)
	c.Param("method")
	serviceName := "UserService"
	serviceMethod := "insertUser"

	fmt.Printf("Received generic POST request for service '%s' method '%s'\n", serviceName, serviceMethod)

	// Checking if service and method are valid
	idl, err := idlmap.GetIdlFile(serviceName, serviceMethod)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	fmt.Printf("IDL path '%s'\n", idl)

	fmt.Println("Received response from backend service")

	resp := new(apigateway.GatewayResponse)

	c.JSON(consts.StatusOK, resp)
}

// ProcessPostRequest .
// @router /{:serviceName}/{:serviceMethod} [POST]
func ProcessPostRequest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req apigateway.GatewayRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	fmt.Println("Reached Here")

	// c.Param("service")
	// c.Param("method")
	serviceName := "UserService"
	serviceMethod := "insertUser"

	fmt.Printf("Received generic POST request for service '%s' method '%s'\n", serviceName, serviceMethod)

	// Checking if service and method are valid
	idl, err := idlmap.GetIdlFile(serviceName, serviceMethod)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	fmt.Printf("IDL path '%s'\n", idl)

	fmt.Println("Received response from backend service")

	resp := new(apigateway.GatewayResponse)

	c.JSON(consts.StatusOK, resp)

}
