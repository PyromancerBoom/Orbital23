// Code generated by hertz generator.

package apigateway

import (
	"context"
	"encoding/json"
	"fmt"

	apigateway "api-gateway/hertz_server/biz/model/apigateway"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	client "github.com/cloudwego/kitex/client"
	genericClient "github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"

	idlmap "api-gateway/hertz_server/biz/model/idlmap"
)

// ProcessPostRequest .
// @router /{:serviceName}/{:serviceMethod} [POST]
func ProcessPostRequest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req apigateway.GatewayRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	fmt.Println(" ")
	fmt.Println("Reached Here POST")

	serviceName := c.Param("serviceName")
	serviceMethod := c.Param("serviceMethod")

	fmt.Printf("Received generic POST request for service '%s' method '%s'\n", serviceName, serviceMethod)

	reqBody, err := c.Body()
	if err != nil {
		fmt.Println(err)
	}
	// Print request data
	fmt.Println("Request data:")
	fmt.Println(string(reqBody))

	// Checking if service and method are valid
	idl, err := idlmap.GetIdlFile(serviceName, serviceMethod)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
	}

	fmt.Printf("IDL path '%s'\n", idl)

	// Generic client init
	provider, err := generic.NewThriftFileProvider(idl)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
	}

	thriftGeneric, err := generic.JSONThriftGeneric(provider)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
	}

	genClient, err := genericClient.NewClient(serviceName, thriftGeneric,
		client.WithHostPorts("127.0.0.1:8888"))
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
	}

	// Make Json string from request
	jsonBytes, err := json.Marshal(req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
	}

	jsonString := string(jsonBytes)

	// Make generic Call and get back response
	response, err := genClient.GenericCall(ctx, serviceMethod, jsonString)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
	}

	// finalResponse, ok := response.(string) // Type assertion to convert response to string
	// if !ok {
	// 	c.String(consts.StatusInternalServerError, "Failed to convert response to string")
	// 	return
	// }

	c.String(consts.StatusOK, response.(string)) // Return finalResponse as a string

	// resp, err := json.Marshal(response)
	// if err != nil {
	// 	c.String(consts.StatusInternalServerError, err.Error())
	// }

	// finalresponse, _ := strconv.Unquote(string(resp))

	// unquotedResp, _ := strconv.Unquote(finalresponse)

	// c.JSON(consts.StatusOK, unquotedResp)

	// if respStr, ok := responseJsonStr.(string); ok {
	// 	responseJson, _ := strconv.Unquote(respStr)
	// 	fmt.Println("response str: ")
	// 	fmt.Println(respStr)
	// 	c.JSON(consts.StatusOK, responseJson)
	// } else {
	// 	fmt.Println("Not captured string")
	// }

	// // Convert response to JSON
	// responseJson := responseJsonStr.(string)

	// resp, second := strconv.Unquote(response.(string))
	// fmt.Println(resp)
}

// ProcessGetRequest .
// @router /{:serviceName}/{:serviceMethod} [GET]
func ProcessGetRequest(ctx context.Context, c *app.RequestContext) {
	var err error
	var req apigateway.GatewayRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	fmt.Println(" ")
	fmt.Println("Reached Here GET")

	serviceName := c.Param("serviceName")
	serviceMethod := c.Param("serviceMethod")

	fmt.Printf("Received generic GET request for service '%s' method '%s'\n", serviceName, serviceMethod)

	// Checking if service and method are valid
	idl, err := idlmap.GetIdlFile(serviceName, serviceMethod)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())

	}

	fmt.Printf("IDL path '%s'\n", idl)

	// Generic client init
	provider, err := generic.NewThriftFileProvider(idl)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	thriftGeneric, err := generic.JSONThriftGeneric(provider)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	genClient, err := genericClient.NewClient(serviceName, thriftGeneric,
		client.WithHostPorts("127.0.0.1:8888"))
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	// Make JSON string from request
	requestJSON, err := json.Marshal(req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	// Make generic call and get back response as map[string]interface{}
	responseData, err := genClient.GenericCall(ctx, serviceMethod, string(requestJSON))
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	// Convert response data to JSON string
	responseJSON, err := json.Marshal(responseData)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.String(consts.StatusOK, string(responseJSON))
}
