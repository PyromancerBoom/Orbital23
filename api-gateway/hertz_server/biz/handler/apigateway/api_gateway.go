// Code generated by hertz generator.

package apigateway

import (
	"bytes"
	"context"
	"encoding/json"
	"time"

	apigateway "api-gateway/hertz_server/biz/model/apigateway"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	consul "github.com/kitex-contrib/registry-consul"
	"go.uber.org/zap"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/discovery"

	"api-gateway/hertz_server/biz/model/cache"
)

var Resolver discovery.Resolver

// init is called during package initialization and sets up the resolver.
func init() {
	// Get registry to enable resolving serverIDs
	var err error
	Resolver, err = consul.NewConsulResolver("127.0.0.1:8500")
	if err != nil {
		zap.L().Error("Error while getting registry", zap.Error(err))
	}
}

// ProcessPostRequest .
// @router /{:serviceName}/{:serviceMethod} [POST]
func ProcessPostRequest(ctx context.Context, c *app.RequestContext) {
	var err error
	options := []callopt.Option{callopt.WithRPCTimeout(time.Second * 100), callopt.WithConnectTimeout(time.Millisecond * 150)}

	zap.L().Info("Processing POST request")

	// Parsing and validation
	var req apigateway.GatewayRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		zap.L().Error("Error in parsing and validating request", zap.Error(err))
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	serviceName := c.Param("serviceName")
	path := c.Param("path")

	reqBody, err := c.Body()
	if err != nil {
		zap.L().Error("Error while getting request body", zap.Error(err))
		c.String(consts.StatusBadRequest, "Request body is missing")
		return
	}

	trimmedReqBody := bytes.TrimSpace(reqBody)
	if len(trimmedReqBody) == 0 {
		zap.L().Warn("Request body is empty")
		c.String(consts.StatusBadRequest, "Request body is empty")
		return
	}

	jsonString := string(reqBody)

	genClient, err := cache.GetGenericClient(serviceName)
	if err != nil {
		zap.L().Error(err.Error())
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	// Make generic Call and get back response
	zap.L().Info("Making generic Call and getting back response")
	response, err := genClient.GenericCall(ctx, path, jsonString, options...)
	if err != nil {
		zap.L().Error("Error while making generic call", zap.Error(err))
		c.String(consts.StatusInternalServerError, err.Error())
	}

	c.String(consts.StatusOK, response.(string))
	zap.L().Info("(POST) Execution complete")
}

// ProcessGetRequest handles the GET request.
// @router /{:serviceName}/{:serviceMethod} [GET]
func ProcessGetRequest(ctx context.Context, c *app.RequestContext) {
	var err error
	options := []callopt.Option{callopt.WithRPCTimeout(time.Second * 100), callopt.WithConnectTimeout(time.Millisecond * 150)}

	zap.L().Info("Processing GET request")

	// Parsing and validation
	var req apigateway.GatewayRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		zap.L().Error("Error in parsing and validating request", zap.Error(err))
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	serviceName := c.Param("serviceName")
	path := c.Param("path")

	queryParams := c.QueryArgs()

	// Extract query parameters
	params := make(map[string]interface{})
	queryParams.VisitAll(func(key, value []byte) {
		params[string(key)] = string(value)
	})

	zap.L().Info("QueryArgs fetched", zap.Any("Params: ", params))

	// Make Json string from request
	jsonBytes, err := json.Marshal(params)
	if err != nil {
		zap.L().Error("Error while marshalling json", zap.Error(err))
		c.String(consts.StatusInternalServerError, err.Error())
	}
	jsonString := string(jsonBytes)

	// // Checking if service and method are valid
	// idl, err := cache.GetServiceIDL(serviceName)
	// if err != nil {
	// 	zap.L().Error("Error while getting service", zap.Error(err))
	// 	c.String(consts.StatusInternalServerError, err.Error())
	// }
	// zap.L().Info("Checked that service and method are valid")

	// // provider initialisation
	// provider, err := generic.NewThriftContentProvider(idl, nil)
	// if err != nil {
	// 	zap.L().Error("Error while initializing provider", zap.Error(err))
	// 	c.String(consts.StatusInternalServerError, err.Error())
	// 	return
	// }
	// zap.L().Info("Provider initialised")

	// thriftGeneric, err := generic.JSONThriftGeneric(provider)
	// if err != nil {
	// 	zap.L().Error("Error while creating JSONThriftGeneric", zap.Error(err))
	// 	c.String(consts.StatusInternalServerError, err.Error())
	// 	return
	// }

	// // Fetch hostport from registry later
	// genClient, err := genericClient.NewClient(serviceName, thriftGeneric,
	// 	client.WithResolver(Resolver))
	// if err != nil {
	// 	zap.L().Error("Error while initializing generic client", zap.Error(err))
	// 	c.String(consts.StatusInternalServerError, err.Error())
	// }

	// zap.L().Debug("Using no caching client calls")

	//Perform better error handling, this call may give us errors!! We need to send back the right error message.
	genClient, err := cache.GetGenericClient(serviceName)
	if err != nil {
		zap.L().Error(err.Error())
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	// Make generic Call and get back response using WithRPC Timeout
	zap.L().Info("Making generic Call and getting back response")
	response, err := genClient.GenericCall(ctx, path, jsonString, options...)
	if err != nil {
		zap.L().Error("Error while making generic call", zap.Error(err))
		c.String(consts.StatusInternalServerError, err.Error())
	}

	c.String(consts.StatusOK, response.(string))
	zap.L().Info("(GET) Execution complete")
}
