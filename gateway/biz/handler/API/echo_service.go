// Code generated by hertz generator.

package API

import (
	"context"
	"encoding/json"

	API "kitex_generic/gateway/biz/model/API"

	genericClient "github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/client"
	consul "github.com/kitex-contrib/registry-consul"
)

type EchoReq struct {
	Msg string
}

// Echo .
// @router /echo [POST]
func Echo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req API.EchoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	provider, err := generic.NewThriftFileProvider("../example_service.thrift")
	if err != nil {
		panic(err)
	}

	g, err := generic.JSONThriftGeneric(provider)
	if err != nil {
		panic(err)
	}

	registry, err := consul.NewConsulResolver("127.0.0.1:8500")
	if err != nil {
		panic(err)
	}

	cli, err := genericClient.NewClient("echo.server", g, client.WithResolver(registry))
	if err != nil {
		panic(err)
	}

	temp := &EchoReq{
		Msg: req.Msg,
	}

	jsn, _ := json.Marshal(temp)

	respJSON, err := cli.GenericCall(ctx, "ExampleMethod", string(jsn))
	if err != nil {
		panic(err)
	}

	c.JSON(consts.StatusOK, respJSON)
}
