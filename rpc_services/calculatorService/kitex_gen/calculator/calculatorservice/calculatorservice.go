// Code generated by Kitex v0.6.0. DO NOT EDIT.

package calculatorservice

import (
	calculator "rpc_services/calculatorService/kitex_gen/calculator"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return calculatorServiceServiceInfo
}

var calculatorServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CalculatorService"
	handlerType := (*calculator.CalculatorService)(nil)
	methods := map[string]kitex.MethodInfo{
		"addNums":      kitex.NewMethodInfo(addNumsHandler, newCalculatorServiceAddNumsArgs, newCalculatorServiceAddNumsResult, false),
		"subNums":      kitex.NewMethodInfo(subNumsHandler, newCalculatorServiceSubNumsArgs, newCalculatorServiceSubNumsResult, false),
		"divNums":      kitex.NewMethodInfo(divNumsHandler, newCalculatorServiceDivNumsArgs, newCalculatorServiceDivNumsResult, false),
		"multiplyNums": kitex.NewMethodInfo(multiplyNumsHandler, newCalculatorServiceMultiplyNumsArgs, newCalculatorServiceMultiplyNumsResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "calculator",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.0",
		Extra:           extra,
	}
	return svcInfo
}

func addNumsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*calculator.CalculatorServiceAddNumsArgs)
	realResult := result.(*calculator.CalculatorServiceAddNumsResult)
	success, err := handler.(calculator.CalculatorService).AddNums(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCalculatorServiceAddNumsArgs() interface{} {
	return calculator.NewCalculatorServiceAddNumsArgs()
}

func newCalculatorServiceAddNumsResult() interface{} {
	return calculator.NewCalculatorServiceAddNumsResult()
}

func subNumsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*calculator.CalculatorServiceSubNumsArgs)
	realResult := result.(*calculator.CalculatorServiceSubNumsResult)
	success, err := handler.(calculator.CalculatorService).SubNums(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCalculatorServiceSubNumsArgs() interface{} {
	return calculator.NewCalculatorServiceSubNumsArgs()
}

func newCalculatorServiceSubNumsResult() interface{} {
	return calculator.NewCalculatorServiceSubNumsResult()
}

func divNumsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*calculator.CalculatorServiceDivNumsArgs)
	realResult := result.(*calculator.CalculatorServiceDivNumsResult)
	success, err := handler.(calculator.CalculatorService).DivNums(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCalculatorServiceDivNumsArgs() interface{} {
	return calculator.NewCalculatorServiceDivNumsArgs()
}

func newCalculatorServiceDivNumsResult() interface{} {
	return calculator.NewCalculatorServiceDivNumsResult()
}

func multiplyNumsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*calculator.CalculatorServiceMultiplyNumsArgs)
	realResult := result.(*calculator.CalculatorServiceMultiplyNumsResult)
	success, err := handler.(calculator.CalculatorService).MultiplyNums(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCalculatorServiceMultiplyNumsArgs() interface{} {
	return calculator.NewCalculatorServiceMultiplyNumsArgs()
}

func newCalculatorServiceMultiplyNumsResult() interface{} {
	return calculator.NewCalculatorServiceMultiplyNumsResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddNums(ctx context.Context, request *calculator.CalculationRequest) (r *calculator.CalculationResponse, err error) {
	var _args calculator.CalculatorServiceAddNumsArgs
	_args.Request = request
	var _result calculator.CalculatorServiceAddNumsResult
	if err = p.c.Call(ctx, "addNums", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SubNums(ctx context.Context, request *calculator.CalculationRequest) (r *calculator.CalculationResponse, err error) {
	var _args calculator.CalculatorServiceSubNumsArgs
	_args.Request = request
	var _result calculator.CalculatorServiceSubNumsResult
	if err = p.c.Call(ctx, "subNums", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DivNums(ctx context.Context, request *calculator.CalculationRequest) (r *calculator.CalculationResponse, err error) {
	var _args calculator.CalculatorServiceDivNumsArgs
	_args.Request = request
	var _result calculator.CalculatorServiceDivNumsResult
	if err = p.c.Call(ctx, "divNums", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MultiplyNums(ctx context.Context, request *calculator.CalculationRequest) (r *calculator.CalculationResponse, err error) {
	var _args calculator.CalculatorServiceMultiplyNumsArgs
	_args.Request = request
	var _result calculator.CalculatorServiceMultiplyNumsResult
	if err = p.c.Call(ctx, "multiplyNums", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
